'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.3053
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("LiquidacionDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class LiquidacionDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableApoderado As ApoderadoDataTable
    
    Private tableDatosAfiliado As DatosAfiliadoDataTable
    
    Private tablefotos As fotosDataTable
    
    Private relationApoderado_FK00 As Global.System.Data.DataRelation
    
    Private relationDatosAfiliado_fotos As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Apoderado")) Is Nothing) Then
                MyBase.Tables.Add(New ApoderadoDataTable(ds.Tables("Apoderado")))
            End If
            If (Not (ds.Tables("DatosAfiliado")) Is Nothing) Then
                MyBase.Tables.Add(New DatosAfiliadoDataTable(ds.Tables("DatosAfiliado")))
            End If
            If (Not (ds.Tables("fotos")) Is Nothing) Then
                MyBase.Tables.Add(New fotosDataTable(ds.Tables("fotos")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Apoderado() As ApoderadoDataTable
        Get
            Return Me.tableApoderado
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DatosAfiliado() As DatosAfiliadoDataTable
        Get
            Return Me.tableDatosAfiliado
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property fotos() As fotosDataTable
        Get
            Return Me.tablefotos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As LiquidacionDataSet = CType(MyBase.Clone,LiquidacionDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Apoderado")) Is Nothing) Then
                MyBase.Tables.Add(New ApoderadoDataTable(ds.Tables("Apoderado")))
            End If
            If (Not (ds.Tables("DatosAfiliado")) Is Nothing) Then
                MyBase.Tables.Add(New DatosAfiliadoDataTable(ds.Tables("DatosAfiliado")))
            End If
            If (Not (ds.Tables("fotos")) Is Nothing) Then
                MyBase.Tables.Add(New fotosDataTable(ds.Tables("fotos")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableApoderado = CType(MyBase.Tables("Apoderado"),ApoderadoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableApoderado) Is Nothing) Then
                Me.tableApoderado.InitVars
            End If
        End If
        Me.tableDatosAfiliado = CType(MyBase.Tables("DatosAfiliado"),DatosAfiliadoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDatosAfiliado) Is Nothing) Then
                Me.tableDatosAfiliado.InitVars
            End If
        End If
        Me.tablefotos = CType(MyBase.Tables("fotos"),fotosDataTable)
        If (initTable = true) Then
            If (Not (Me.tablefotos) Is Nothing) Then
                Me.tablefotos.InitVars
            End If
        End If
        Me.relationApoderado_FK00 = Me.Relations("Apoderado_FK00")
        Me.relationDatosAfiliado_fotos = Me.Relations("DatosAfiliado_fotos")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "LiquidacionDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/LiquidacionDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableApoderado = New ApoderadoDataTable
        MyBase.Tables.Add(Me.tableApoderado)
        Me.tableDatosAfiliado = New DatosAfiliadoDataTable
        MyBase.Tables.Add(Me.tableDatosAfiliado)
        Me.tablefotos = New fotosDataTable
        MyBase.Tables.Add(Me.tablefotos)
        Me.relationApoderado_FK00 = New Global.System.Data.DataRelation("Apoderado_FK00", New Global.System.Data.DataColumn() {Me.tableDatosAfiliado.PLLAColumn, Me.tableDatosAfiliado.ORDENColumn, Me.tableDatosAfiliado.AFILIADOColumn}, New Global.System.Data.DataColumn() {Me.tableApoderado.PLLAColumn, Me.tableApoderado.ORDENColumn, Me.tableApoderado.AFILIADOColumn}, false)
        Me.Relations.Add(Me.relationApoderado_FK00)
        Me.relationDatosAfiliado_fotos = New Global.System.Data.DataRelation("DatosAfiliado_fotos", New Global.System.Data.DataColumn() {Me.tableDatosAfiliado.CONTROLColumn}, New Global.System.Data.DataColumn() {Me.tablefotos.CONTROLColumn}, false)
        Me.Relations.Add(Me.relationDatosAfiliado_fotos)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeApoderado() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDatosAfiliado() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializefotos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As LiquidacionDataSet = New LiquidacionDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub ApoderadoRowChangeEventHandler(ByVal sender As Object, ByVal e As ApoderadoRowChangeEvent)
    
    Public Delegate Sub DatosAfiliadoRowChangeEventHandler(ByVal sender As Object, ByVal e As DatosAfiliadoRowChangeEvent)
    
    Public Delegate Sub fotosRowChangeEventHandler(ByVal sender As Object, ByVal e As fotosRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ApoderadoDataTable
        Inherits Global.System.Data.TypedTableBase(Of ApoderadoRow)
        
        Private columnINTERNO As Global.System.Data.DataColumn
        
        Private columnPLLA As Global.System.Data.DataColumn
        
        Private columnORDEN As Global.System.Data.DataColumn
        
        Private columnAFILIADO As Global.System.Data.DataColumn
        
        Private columnNOMBRE As Global.System.Data.DataColumn
        
        Private columnDIRECCION As Global.System.Data.DataColumn
        
        Private columnTIPO_DOC As Global.System.Data.DataColumn
        
        Private columnNRO_DOCUMENTO As Global.System.Data.DataColumn
        
        Private columnCOD_LOCALIDAD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Apoderado"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTERNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTERNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PLLAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLLA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AFILIADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAFILIADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIRECCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIRECCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_DOCUMENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_DOCUMENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_LOCALIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_LOCALIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ApoderadoRow
            Get
                Return CType(Me.Rows(index),ApoderadoRow)
            End Get
        End Property
        
        Public Event ApoderadoRowChanging As ApoderadoRowChangeEventHandler
        
        Public Event ApoderadoRowChanged As ApoderadoRowChangeEventHandler
        
        Public Event ApoderadoRowDeleting As ApoderadoRowChangeEventHandler
        
        Public Event ApoderadoRowDeleted As ApoderadoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddApoderadoRow(ByVal row As ApoderadoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddApoderadoRow(ByVal PLLA As String, ByVal ORDEN As String, ByVal AFILIADO As String, ByVal NOMBRE As String, ByVal DIRECCION As String, ByVal TIPO_DOC As String, ByVal NRO_DOCUMENTO As String, ByVal COD_LOCALIDAD As String) As ApoderadoRow
            Dim rowApoderadoRow As ApoderadoRow = CType(Me.NewRow,ApoderadoRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, PLLA, ORDEN, AFILIADO, NOMBRE, DIRECCION, TIPO_DOC, NRO_DOCUMENTO, COD_LOCALIDAD}
            rowApoderadoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowApoderadoRow)
            Return rowApoderadoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ApoderadoDataTable = CType(MyBase.Clone,ApoderadoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ApoderadoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnINTERNO = MyBase.Columns("INTERNO")
            Me.columnPLLA = MyBase.Columns("PLLA")
            Me.columnORDEN = MyBase.Columns("ORDEN")
            Me.columnAFILIADO = MyBase.Columns("AFILIADO")
            Me.columnNOMBRE = MyBase.Columns("NOMBRE")
            Me.columnDIRECCION = MyBase.Columns("DIRECCION")
            Me.columnTIPO_DOC = MyBase.Columns("TIPO_DOC")
            Me.columnNRO_DOCUMENTO = MyBase.Columns("NRO_DOCUMENTO")
            Me.columnCOD_LOCALIDAD = MyBase.Columns("COD_LOCALIDAD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnINTERNO = New Global.System.Data.DataColumn("INTERNO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTERNO)
            Me.columnPLLA = New Global.System.Data.DataColumn("PLLA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLLA)
            Me.columnORDEN = New Global.System.Data.DataColumn("ORDEN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDEN)
            Me.columnAFILIADO = New Global.System.Data.DataColumn("AFILIADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAFILIADO)
            Me.columnNOMBRE = New Global.System.Data.DataColumn("NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE)
            Me.columnDIRECCION = New Global.System.Data.DataColumn("DIRECCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIRECCION)
            Me.columnTIPO_DOC = New Global.System.Data.DataColumn("TIPO_DOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_DOC)
            Me.columnNRO_DOCUMENTO = New Global.System.Data.DataColumn("NRO_DOCUMENTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_DOCUMENTO)
            Me.columnCOD_LOCALIDAD = New Global.System.Data.DataColumn("COD_LOCALIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_LOCALIDAD)
            Me.columnINTERNO.AutoIncrement = true
            Me.columnINTERNO.AutoIncrementSeed = -1
            Me.columnINTERNO.AutoIncrementStep = -1
            Me.columnINTERNO.AllowDBNull = false
            Me.columnINTERNO.ReadOnly = true
            Me.columnPLLA.AllowDBNull = false
            Me.columnPLLA.MaxLength = 3
            Me.columnORDEN.AllowDBNull = false
            Me.columnORDEN.MaxLength = 4
            Me.columnAFILIADO.AllowDBNull = false
            Me.columnAFILIADO.MaxLength = 6
            Me.columnNOMBRE.AllowDBNull = false
            Me.columnNOMBRE.MaxLength = 50
            Me.columnDIRECCION.MaxLength = 50
            Me.columnTIPO_DOC.MaxLength = 1
            Me.columnNRO_DOCUMENTO.AllowDBNull = false
            Me.columnNRO_DOCUMENTO.MaxLength = 11
            Me.columnCOD_LOCALIDAD.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewApoderadoRow() As ApoderadoRow
            Return CType(Me.NewRow,ApoderadoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ApoderadoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ApoderadoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ApoderadoRowChangedEvent) Is Nothing) Then
                RaiseEvent ApoderadoRowChanged(Me, New ApoderadoRowChangeEvent(CType(e.Row,ApoderadoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ApoderadoRowChangingEvent) Is Nothing) Then
                RaiseEvent ApoderadoRowChanging(Me, New ApoderadoRowChangeEvent(CType(e.Row,ApoderadoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ApoderadoRowDeletedEvent) Is Nothing) Then
                RaiseEvent ApoderadoRowDeleted(Me, New ApoderadoRowChangeEvent(CType(e.Row,ApoderadoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ApoderadoRowDeletingEvent) Is Nothing) Then
                RaiseEvent ApoderadoRowDeleting(Me, New ApoderadoRowChangeEvent(CType(e.Row,ApoderadoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveApoderadoRow(ByVal row As ApoderadoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As LiquidacionDataSet = New LiquidacionDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ApoderadoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DatosAfiliadoDataTable
        Inherits Global.System.Data.TypedTableBase(Of DatosAfiliadoRow)
        
        Private columnPLLA As Global.System.Data.DataColumn
        
        Private columnORDEN As Global.System.Data.DataColumn
        
        Private columnAFILIADO As Global.System.Data.DataColumn
        
        Private columnCONTROL As Global.System.Data.DataColumn
        
        Private columnRESOLUCION As Global.System.Data.DataColumn
        
        Private columnNOMBRE As Global.System.Data.DataColumn
        
        Private columnDIRECCION As Global.System.Data.DataColumn
        
        Private columnSEXO As Global.System.Data.DataColumn
        
        Private columnTIPO_DOC As Global.System.Data.DataColumn
        
        Private columnNRO_DOCUMENTO As Global.System.Data.DataColumn
        
        Private columnCUIL As Global.System.Data.DataColumn
        
        Private columnCLASE As Global.System.Data.DataColumn
        
        Private columnEXPEDIENTE As Global.System.Data.DataColumn
        
        Private columnANO_EXPEDIENTE As Global.System.Data.DataColumn
        
        Private columnCOD_BENEFICIO As Global.System.Data.DataColumn
        
        Private columnBENEFICIO As Global.System.Data.DataColumn
        
        Private columnOBRA_SOCIAL As Global.System.Data.DataColumn
        
        Private columnTOPE As Global.System.Data.DataColumn
        
        Private columnSUCESOR As Global.System.Data.DataColumn
        
        Private columnNROCTACTE As Global.System.Data.DataColumn
        
        Private columnSITRAJ As Global.System.Data.DataColumn
        
        Private columnLETRA As Global.System.Data.DataColumn
        
        Private columnHABILITADO As Global.System.Data.DataColumn
        
        Private columnBORRADO As Global.System.Data.DataColumn
        
        Private columnCODLOCALIDAD As Global.System.Data.DataColumn
        
        Private columnCESE As Global.System.Data.DataColumn
        
        Private columnRes932 As Global.System.Data.DataColumn
        
        Private columnNROCTACTENACION As Global.System.Data.DataColumn
        
        Private columnCalleNom As Global.System.Data.DataColumn
        
        Private columnCalleNum As Global.System.Data.DataColumn
        
        Private columnCallePiso As Global.System.Data.DataColumn
        
        Private columnDepto As Global.System.Data.DataColumn
        
        Private columnCBU As Global.System.Data.DataColumn
        
        Private columnFNac As Global.System.Data.DataColumn
        
        Private columnupsize_ts As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DatosAfiliado"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PLLAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLLA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AFILIADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAFILIADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CONTROLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONTROL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RESOLUCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESOLUCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIRECCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIRECCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEXOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEXO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_DOCUMENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_DOCUMENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLASEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLASE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXPEDIENTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXPEDIENTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANO_EXPEDIENTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANO_EXPEDIENTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_BENEFICIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_BENEFICIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BENEFICIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBENEFICIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OBRA_SOCIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOBRA_SOCIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUCESORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUCESOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NROCTACTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNROCTACTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SITRAJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSITRAJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LETRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLETRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HABILITADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHABILITADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BORRADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBORRADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODLOCALIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODLOCALIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CESEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCESE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Res932Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRes932
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NROCTACTENACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNROCTACTENACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CalleNomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalleNom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CalleNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalleNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CallePisoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCallePiso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeptoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CBUColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCBU
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FNacColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFNac
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property upsize_tsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnupsize_ts
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DatosAfiliadoRow
            Get
                Return CType(Me.Rows(index),DatosAfiliadoRow)
            End Get
        End Property
        
        Public Event DatosAfiliadoRowChanging As DatosAfiliadoRowChangeEventHandler
        
        Public Event DatosAfiliadoRowChanged As DatosAfiliadoRowChangeEventHandler
        
        Public Event DatosAfiliadoRowDeleting As DatosAfiliadoRowChangeEventHandler
        
        Public Event DatosAfiliadoRowDeleted As DatosAfiliadoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDatosAfiliadoRow(ByVal row As DatosAfiliadoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDatosAfiliadoRow( _
                    ByVal PLLA As String,  _
                    ByVal ORDEN As String,  _
                    ByVal AFILIADO As String,  _
                    ByVal RESOLUCION As String,  _
                    ByVal NOMBRE As String,  _
                    ByVal DIRECCION As String,  _
                    ByVal SEXO As String,  _
                    ByVal TIPO_DOC As String,  _
                    ByVal NRO_DOCUMENTO As String,  _
                    ByVal CUIL As String,  _
                    ByVal CLASE As Integer,  _
                    ByVal EXPEDIENTE As String,  _
                    ByVal ANO_EXPEDIENTE As String,  _
                    ByVal COD_BENEFICIO As String,  _
                    ByVal BENEFICIO As Double,  _
                    ByVal OBRA_SOCIAL As String,  _
                    ByVal TOPE As Short,  _
                    ByVal SUCESOR As String,  _
                    ByVal NROCTACTE As String,  _
                    ByVal SITRAJ As String,  _
                    ByVal LETRA As Short,  _
                    ByVal HABILITADO As String,  _
                    ByVal BORRADO As String,  _
                    ByVal CODLOCALIDAD As Short,  _
                    ByVal CESE As String,  _
                    ByVal Res932 As String,  _
                    ByVal NROCTACTENACION As String,  _
                    ByVal CalleNom As String,  _
                    ByVal CalleNum As Short,  _
                    ByVal CallePiso As Short,  _
                    ByVal Depto As String,  _
                    ByVal CBU As String,  _
                    ByVal FNac As String,  _
                    ByVal upsize_ts() As Byte) As DatosAfiliadoRow
            Dim rowDatosAfiliadoRow As DatosAfiliadoRow = CType(Me.NewRow,DatosAfiliadoRow)
            Dim columnValuesArray() As Object = New Object() {PLLA, ORDEN, AFILIADO, Nothing, RESOLUCION, NOMBRE, DIRECCION, SEXO, TIPO_DOC, NRO_DOCUMENTO, CUIL, CLASE, EXPEDIENTE, ANO_EXPEDIENTE, COD_BENEFICIO, BENEFICIO, OBRA_SOCIAL, TOPE, SUCESOR, NROCTACTE, SITRAJ, LETRA, HABILITADO, BORRADO, CODLOCALIDAD, CESE, Res932, NROCTACTENACION, CalleNom, CalleNum, CallePiso, Depto, CBU, FNac, upsize_ts}
            rowDatosAfiliadoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDatosAfiliadoRow)
            Return rowDatosAfiliadoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPLLAORDENAFILIADO(ByVal PLLA As String, ByVal ORDEN As String, ByVal AFILIADO As String) As DatosAfiliadoRow
            Return CType(Me.Rows.Find(New Object() {PLLA, ORDEN, AFILIADO}),DatosAfiliadoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DatosAfiliadoDataTable = CType(MyBase.Clone,DatosAfiliadoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DatosAfiliadoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPLLA = MyBase.Columns("PLLA")
            Me.columnORDEN = MyBase.Columns("ORDEN")
            Me.columnAFILIADO = MyBase.Columns("AFILIADO")
            Me.columnCONTROL = MyBase.Columns("CONTROL")
            Me.columnRESOLUCION = MyBase.Columns("RESOLUCION")
            Me.columnNOMBRE = MyBase.Columns("NOMBRE")
            Me.columnDIRECCION = MyBase.Columns("DIRECCION")
            Me.columnSEXO = MyBase.Columns("SEXO")
            Me.columnTIPO_DOC = MyBase.Columns("TIPO_DOC")
            Me.columnNRO_DOCUMENTO = MyBase.Columns("NRO_DOCUMENTO")
            Me.columnCUIL = MyBase.Columns("CUIL")
            Me.columnCLASE = MyBase.Columns("CLASE")
            Me.columnEXPEDIENTE = MyBase.Columns("EXPEDIENTE")
            Me.columnANO_EXPEDIENTE = MyBase.Columns("ANO_EXPEDIENTE")
            Me.columnCOD_BENEFICIO = MyBase.Columns("COD_BENEFICIO")
            Me.columnBENEFICIO = MyBase.Columns("BENEFICIO")
            Me.columnOBRA_SOCIAL = MyBase.Columns("OBRA_SOCIAL")
            Me.columnTOPE = MyBase.Columns("TOPE")
            Me.columnSUCESOR = MyBase.Columns("SUCESOR")
            Me.columnNROCTACTE = MyBase.Columns("NROCTACTE")
            Me.columnSITRAJ = MyBase.Columns("SITRAJ")
            Me.columnLETRA = MyBase.Columns("LETRA")
            Me.columnHABILITADO = MyBase.Columns("HABILITADO")
            Me.columnBORRADO = MyBase.Columns("BORRADO")
            Me.columnCODLOCALIDAD = MyBase.Columns("CODLOCALIDAD")
            Me.columnCESE = MyBase.Columns("CESE")
            Me.columnRes932 = MyBase.Columns("Res932")
            Me.columnNROCTACTENACION = MyBase.Columns("NROCTACTENACION")
            Me.columnCalleNom = MyBase.Columns("CalleNom")
            Me.columnCalleNum = MyBase.Columns("CalleNum")
            Me.columnCallePiso = MyBase.Columns("CallePiso")
            Me.columnDepto = MyBase.Columns("Depto")
            Me.columnCBU = MyBase.Columns("CBU")
            Me.columnFNac = MyBase.Columns("FNac")
            Me.columnupsize_ts = MyBase.Columns("upsize_ts")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPLLA = New Global.System.Data.DataColumn("PLLA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLLA)
            Me.columnORDEN = New Global.System.Data.DataColumn("ORDEN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDEN)
            Me.columnAFILIADO = New Global.System.Data.DataColumn("AFILIADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAFILIADO)
            Me.columnCONTROL = New Global.System.Data.DataColumn("CONTROL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONTROL)
            Me.columnRESOLUCION = New Global.System.Data.DataColumn("RESOLUCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESOLUCION)
            Me.columnNOMBRE = New Global.System.Data.DataColumn("NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE)
            Me.columnDIRECCION = New Global.System.Data.DataColumn("DIRECCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIRECCION)
            Me.columnSEXO = New Global.System.Data.DataColumn("SEXO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEXO)
            Me.columnTIPO_DOC = New Global.System.Data.DataColumn("TIPO_DOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_DOC)
            Me.columnNRO_DOCUMENTO = New Global.System.Data.DataColumn("NRO_DOCUMENTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_DOCUMENTO)
            Me.columnCUIL = New Global.System.Data.DataColumn("CUIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUIL)
            Me.columnCLASE = New Global.System.Data.DataColumn("CLASE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLASE)
            Me.columnEXPEDIENTE = New Global.System.Data.DataColumn("EXPEDIENTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXPEDIENTE)
            Me.columnANO_EXPEDIENTE = New Global.System.Data.DataColumn("ANO_EXPEDIENTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANO_EXPEDIENTE)
            Me.columnCOD_BENEFICIO = New Global.System.Data.DataColumn("COD_BENEFICIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_BENEFICIO)
            Me.columnBENEFICIO = New Global.System.Data.DataColumn("BENEFICIO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBENEFICIO)
            Me.columnOBRA_SOCIAL = New Global.System.Data.DataColumn("OBRA_SOCIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOBRA_SOCIAL)
            Me.columnTOPE = New Global.System.Data.DataColumn("TOPE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOPE)
            Me.columnSUCESOR = New Global.System.Data.DataColumn("SUCESOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUCESOR)
            Me.columnNROCTACTE = New Global.System.Data.DataColumn("NROCTACTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNROCTACTE)
            Me.columnSITRAJ = New Global.System.Data.DataColumn("SITRAJ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSITRAJ)
            Me.columnLETRA = New Global.System.Data.DataColumn("LETRA", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLETRA)
            Me.columnHABILITADO = New Global.System.Data.DataColumn("HABILITADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHABILITADO)
            Me.columnBORRADO = New Global.System.Data.DataColumn("BORRADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBORRADO)
            Me.columnCODLOCALIDAD = New Global.System.Data.DataColumn("CODLOCALIDAD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODLOCALIDAD)
            Me.columnCESE = New Global.System.Data.DataColumn("CESE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCESE)
            Me.columnRes932 = New Global.System.Data.DataColumn("Res932", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRes932)
            Me.columnNROCTACTENACION = New Global.System.Data.DataColumn("NROCTACTENACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNROCTACTENACION)
            Me.columnCalleNom = New Global.System.Data.DataColumn("CalleNom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalleNom)
            Me.columnCalleNum = New Global.System.Data.DataColumn("CalleNum", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalleNum)
            Me.columnCallePiso = New Global.System.Data.DataColumn("CallePiso", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCallePiso)
            Me.columnDepto = New Global.System.Data.DataColumn("Depto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepto)
            Me.columnCBU = New Global.System.Data.DataColumn("CBU", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCBU)
            Me.columnFNac = New Global.System.Data.DataColumn("FNac", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFNac)
            Me.columnupsize_ts = New Global.System.Data.DataColumn("upsize_ts", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnupsize_ts)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPLLA, Me.columnORDEN, Me.columnAFILIADO}, true))
            Me.columnPLLA.AllowDBNull = false
            Me.columnPLLA.MaxLength = 3
            Me.columnORDEN.AllowDBNull = false
            Me.columnORDEN.MaxLength = 4
            Me.columnAFILIADO.AllowDBNull = false
            Me.columnAFILIADO.MaxLength = 6
            Me.columnCONTROL.AutoIncrement = true
            Me.columnCONTROL.AutoIncrementSeed = -1
            Me.columnCONTROL.AutoIncrementStep = -1
            Me.columnCONTROL.AllowDBNull = false
            Me.columnCONTROL.ReadOnly = true
            Me.columnRESOLUCION.MaxLength = 10
            Me.columnNOMBRE.AllowDBNull = false
            Me.columnNOMBRE.MaxLength = 50
            Me.columnDIRECCION.MaxLength = 150
            Me.columnSEXO.AllowDBNull = false
            Me.columnSEXO.MaxLength = 1
            Me.columnTIPO_DOC.MaxLength = 1
            Me.columnNRO_DOCUMENTO.AllowDBNull = false
            Me.columnNRO_DOCUMENTO.MaxLength = 11
            Me.columnCUIL.MaxLength = 14
            Me.columnEXPEDIENTE.MaxLength = 20
            Me.columnANO_EXPEDIENTE.MaxLength = 4
            Me.columnCOD_BENEFICIO.MaxLength = 2
            Me.columnBENEFICIO.AllowDBNull = false
            Me.columnOBRA_SOCIAL.MaxLength = 1
            Me.columnSUCESOR.MaxLength = 50
            Me.columnNROCTACTE.MaxLength = 30
            Me.columnSITRAJ.MaxLength = 1
            Me.columnHABILITADO.MaxLength = 1
            Me.columnBORRADO.AllowDBNull = false
            Me.columnBORRADO.MaxLength = 1
            Me.columnCESE.MaxLength = 10
            Me.columnRes932.MaxLength = 1
            Me.columnNROCTACTENACION.MaxLength = 10
            Me.columnCalleNom.MaxLength = 100
            Me.columnDepto.MaxLength = 5
            Me.columnCBU.MaxLength = 22
            Me.columnFNac.MaxLength = 50
            Me.columnupsize_ts.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDatosAfiliadoRow() As DatosAfiliadoRow
            Return CType(Me.NewRow,DatosAfiliadoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DatosAfiliadoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DatosAfiliadoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DatosAfiliadoRowChangedEvent) Is Nothing) Then
                RaiseEvent DatosAfiliadoRowChanged(Me, New DatosAfiliadoRowChangeEvent(CType(e.Row,DatosAfiliadoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DatosAfiliadoRowChangingEvent) Is Nothing) Then
                RaiseEvent DatosAfiliadoRowChanging(Me, New DatosAfiliadoRowChangeEvent(CType(e.Row,DatosAfiliadoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DatosAfiliadoRowDeletedEvent) Is Nothing) Then
                RaiseEvent DatosAfiliadoRowDeleted(Me, New DatosAfiliadoRowChangeEvent(CType(e.Row,DatosAfiliadoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DatosAfiliadoRowDeletingEvent) Is Nothing) Then
                RaiseEvent DatosAfiliadoRowDeleting(Me, New DatosAfiliadoRowChangeEvent(CType(e.Row,DatosAfiliadoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDatosAfiliadoRow(ByVal row As DatosAfiliadoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As LiquidacionDataSet = New LiquidacionDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DatosAfiliadoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class fotosDataTable
        Inherits Global.System.Data.TypedTableBase(Of fotosRow)
        
        Private columnCONTROL As Global.System.Data.DataColumn
        
        Private columnFOTO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "fotos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CONTROLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONTROL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As fotosRow
            Get
                Return CType(Me.Rows(index),fotosRow)
            End Get
        End Property
        
        Public Event fotosRowChanging As fotosRowChangeEventHandler
        
        Public Event fotosRowChanged As fotosRowChangeEventHandler
        
        Public Event fotosRowDeleting As fotosRowChangeEventHandler
        
        Public Event fotosRowDeleted As fotosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddfotosRow(ByVal row As fotosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddfotosRow(ByVal parentDatosAfiliadoRowByDatosAfiliado_fotos As DatosAfiliadoRow, ByVal FOTO() As Byte) As fotosRow
            Dim rowfotosRow As fotosRow = CType(Me.NewRow,fotosRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, FOTO}
            If (Not (parentDatosAfiliadoRowByDatosAfiliado_fotos) Is Nothing) Then
                columnValuesArray(0) = parentDatosAfiliadoRowByDatosAfiliado_fotos(3)
            End If
            rowfotosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowfotosRow)
            Return rowfotosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCONTROL(ByVal CONTROL As Integer) As fotosRow
            Return CType(Me.Rows.Find(New Object() {CONTROL}),fotosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As fotosDataTable = CType(MyBase.Clone,fotosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New fotosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCONTROL = MyBase.Columns("CONTROL")
            Me.columnFOTO = MyBase.Columns("FOTO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCONTROL = New Global.System.Data.DataColumn("CONTROL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONTROL)
            Me.columnFOTO = New Global.System.Data.DataColumn("FOTO", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOTO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCONTROL}, true))
            Me.columnCONTROL.AllowDBNull = false
            Me.columnCONTROL.Unique = true
            Me.columnFOTO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewfotosRow() As fotosRow
            Return CType(Me.NewRow,fotosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New fotosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(fotosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.fotosRowChangedEvent) Is Nothing) Then
                RaiseEvent fotosRowChanged(Me, New fotosRowChangeEvent(CType(e.Row,fotosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.fotosRowChangingEvent) Is Nothing) Then
                RaiseEvent fotosRowChanging(Me, New fotosRowChangeEvent(CType(e.Row,fotosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.fotosRowDeletedEvent) Is Nothing) Then
                RaiseEvent fotosRowDeleted(Me, New fotosRowChangeEvent(CType(e.Row,fotosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.fotosRowDeletingEvent) Is Nothing) Then
                RaiseEvent fotosRowDeleting(Me, New fotosRowChangeEvent(CType(e.Row,fotosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovefotosRow(ByVal row As fotosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As LiquidacionDataSet = New LiquidacionDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "fotosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ApoderadoRow
        Inherits Global.System.Data.DataRow
        
        Private tableApoderado As ApoderadoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableApoderado = CType(Me.Table,ApoderadoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTERNO() As Integer
            Get
                Return CType(Me(Me.tableApoderado.INTERNOColumn),Integer)
            End Get
            Set
                Me(Me.tableApoderado.INTERNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PLLA() As String
            Get
                Return CType(Me(Me.tableApoderado.PLLAColumn),String)
            End Get
            Set
                Me(Me.tableApoderado.PLLAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDEN() As String
            Get
                Return CType(Me(Me.tableApoderado.ORDENColumn),String)
            End Get
            Set
                Me(Me.tableApoderado.ORDENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AFILIADO() As String
            Get
                Return CType(Me(Me.tableApoderado.AFILIADOColumn),String)
            End Get
            Set
                Me(Me.tableApoderado.AFILIADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOMBRE() As String
            Get
                Return CType(Me(Me.tableApoderado.NOMBREColumn),String)
            End Get
            Set
                Me(Me.tableApoderado.NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIRECCION() As String
            Get
                Try 
                    Return CType(Me(Me.tableApoderado.DIRECCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DIRECCION' de la tabla 'Apoderado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApoderado.DIRECCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_DOC() As String
            Get
                Try 
                    Return CType(Me(Me.tableApoderado.TIPO_DOCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_DOC' de la tabla 'Apoderado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApoderado.TIPO_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_DOCUMENTO() As String
            Get
                Return CType(Me(Me.tableApoderado.NRO_DOCUMENTOColumn),String)
            End Get
            Set
                Me(Me.tableApoderado.NRO_DOCUMENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_LOCALIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableApoderado.COD_LOCALIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_LOCALIDAD' de la tabla 'Apoderado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApoderado.COD_LOCALIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DatosAfiliadoRowParent() As DatosAfiliadoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Apoderado_FK00")),DatosAfiliadoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Apoderado_FK00"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIRECCIONNull() As Boolean
            Return Me.IsNull(Me.tableApoderado.DIRECCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIRECCIONNull()
            Me(Me.tableApoderado.DIRECCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_DOCNull() As Boolean
            Return Me.IsNull(Me.tableApoderado.TIPO_DOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_DOCNull()
            Me(Me.tableApoderado.TIPO_DOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_LOCALIDADNull() As Boolean
            Return Me.IsNull(Me.tableApoderado.COD_LOCALIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_LOCALIDADNull()
            Me(Me.tableApoderado.COD_LOCALIDADColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DatosAfiliadoRow
        Inherits Global.System.Data.DataRow
        
        Private tableDatosAfiliado As DatosAfiliadoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDatosAfiliado = CType(Me.Table,DatosAfiliadoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PLLA() As String
            Get
                Return CType(Me(Me.tableDatosAfiliado.PLLAColumn),String)
            End Get
            Set
                Me(Me.tableDatosAfiliado.PLLAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDEN() As String
            Get
                Return CType(Me(Me.tableDatosAfiliado.ORDENColumn),String)
            End Get
            Set
                Me(Me.tableDatosAfiliado.ORDENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AFILIADO() As String
            Get
                Return CType(Me(Me.tableDatosAfiliado.AFILIADOColumn),String)
            End Get
            Set
                Me(Me.tableDatosAfiliado.AFILIADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CONTROL() As Integer
            Get
                Return CType(Me(Me.tableDatosAfiliado.CONTROLColumn),Integer)
            End Get
            Set
                Me(Me.tableDatosAfiliado.CONTROLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RESOLUCION() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAfiliado.RESOLUCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RESOLUCION' de la tabla 'DatosAfiliado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAfiliado.RESOLUCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOMBRE() As String
            Get
                Return CType(Me(Me.tableDatosAfiliado.NOMBREColumn),String)
            End Get
            Set
                Me(Me.tableDatosAfiliado.NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIRECCION() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAfiliado.DIRECCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DIRECCION' de la tabla 'DatosAfiliado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAfiliado.DIRECCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEXO() As String
            Get
                Return CType(Me(Me.tableDatosAfiliado.SEXOColumn),String)
            End Get
            Set
                Me(Me.tableDatosAfiliado.SEXOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_DOC() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAfiliado.TIPO_DOCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_DOC' de la tabla 'DatosAfiliado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAfiliado.TIPO_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_DOCUMENTO() As String
            Get
                Return CType(Me(Me.tableDatosAfiliado.NRO_DOCUMENTOColumn),String)
            End Get
            Set
                Me(Me.tableDatosAfiliado.NRO_DOCUMENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAfiliado.CUILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CUIL' de la tabla 'DatosAfiliado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAfiliado.CUILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLASE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatosAfiliado.CLASEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLASE' de la tabla 'DatosAfiliado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAfiliado.CLASEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXPEDIENTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAfiliado.EXPEDIENTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EXPEDIENTE' de la tabla 'DatosAfiliado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAfiliado.EXPEDIENTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANO_EXPEDIENTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAfiliado.ANO_EXPEDIENTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANO_EXPEDIENTE' de la tabla 'DatosAfiliado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAfiliado.ANO_EXPEDIENTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_BENEFICIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAfiliado.COD_BENEFICIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_BENEFICIO' de la tabla 'DatosAfiliado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAfiliado.COD_BENEFICIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BENEFICIO() As Double
            Get
                Return CType(Me(Me.tableDatosAfiliado.BENEFICIOColumn),Double)
            End Get
            Set
                Me(Me.tableDatosAfiliado.BENEFICIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OBRA_SOCIAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAfiliado.OBRA_SOCIALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OBRA_SOCIAL' de la tabla 'DatosAfiliado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAfiliado.OBRA_SOCIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOPE() As Short
            Get
                Try 
                    Return CType(Me(Me.tableDatosAfiliado.TOPEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TOPE' de la tabla 'DatosAfiliado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAfiliado.TOPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUCESOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAfiliado.SUCESORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUCESOR' de la tabla 'DatosAfiliado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAfiliado.SUCESORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NROCTACTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAfiliado.NROCTACTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NROCTACTE' de la tabla 'DatosAfiliado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAfiliado.NROCTACTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SITRAJ() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAfiliado.SITRAJColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SITRAJ' de la tabla 'DatosAfiliado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAfiliado.SITRAJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LETRA() As Short
            Get
                Try 
                    Return CType(Me(Me.tableDatosAfiliado.LETRAColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'LETRA' de la tabla 'DatosAfiliado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAfiliado.LETRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HABILITADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAfiliado.HABILITADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'HABILITADO' de la tabla 'DatosAfiliado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAfiliado.HABILITADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BORRADO() As String
            Get
                Return CType(Me(Me.tableDatosAfiliado.BORRADOColumn),String)
            End Get
            Set
                Me(Me.tableDatosAfiliado.BORRADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODLOCALIDAD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableDatosAfiliado.CODLOCALIDADColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CODLOCALIDAD' de la tabla 'DatosAfiliado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAfiliado.CODLOCALIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CESE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAfiliado.CESEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CESE' de la tabla 'DatosAfiliado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAfiliado.CESEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Res932() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAfiliado.Res932Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Res932' de la tabla 'DatosAfiliado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAfiliado.Res932Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NROCTACTENACION() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAfiliado.NROCTACTENACIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NROCTACTENACION' de la tabla 'DatosAfiliado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAfiliado.NROCTACTENACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CalleNom() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAfiliado.CalleNomColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CalleNom' de la tabla 'DatosAfiliado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAfiliado.CalleNomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CalleNum() As Short
            Get
                Try 
                    Return CType(Me(Me.tableDatosAfiliado.CalleNumColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CalleNum' de la tabla 'DatosAfiliado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAfiliado.CalleNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CallePiso() As Short
            Get
                Try 
                    Return CType(Me(Me.tableDatosAfiliado.CallePisoColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CallePiso' de la tabla 'DatosAfiliado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAfiliado.CallePisoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Depto() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAfiliado.DeptoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Depto' de la tabla 'DatosAfiliado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAfiliado.DeptoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CBU() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAfiliado.CBUColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CBU' de la tabla 'DatosAfiliado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAfiliado.CBUColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FNac() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAfiliado.FNacColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FNac' de la tabla 'DatosAfiliado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAfiliado.FNacColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property upsize_ts() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableDatosAfiliado.upsize_tsColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'upsize_ts' de la tabla 'DatosAfiliado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAfiliado.upsize_tsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRESOLUCIONNull() As Boolean
            Return Me.IsNull(Me.tableDatosAfiliado.RESOLUCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRESOLUCIONNull()
            Me(Me.tableDatosAfiliado.RESOLUCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIRECCIONNull() As Boolean
            Return Me.IsNull(Me.tableDatosAfiliado.DIRECCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIRECCIONNull()
            Me(Me.tableDatosAfiliado.DIRECCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_DOCNull() As Boolean
            Return Me.IsNull(Me.tableDatosAfiliado.TIPO_DOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_DOCNull()
            Me(Me.tableDatosAfiliado.TIPO_DOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUILNull() As Boolean
            Return Me.IsNull(Me.tableDatosAfiliado.CUILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUILNull()
            Me(Me.tableDatosAfiliado.CUILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLASENull() As Boolean
            Return Me.IsNull(Me.tableDatosAfiliado.CLASEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLASENull()
            Me(Me.tableDatosAfiliado.CLASEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXPEDIENTENull() As Boolean
            Return Me.IsNull(Me.tableDatosAfiliado.EXPEDIENTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXPEDIENTENull()
            Me(Me.tableDatosAfiliado.EXPEDIENTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANO_EXPEDIENTENull() As Boolean
            Return Me.IsNull(Me.tableDatosAfiliado.ANO_EXPEDIENTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANO_EXPEDIENTENull()
            Me(Me.tableDatosAfiliado.ANO_EXPEDIENTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_BENEFICIONull() As Boolean
            Return Me.IsNull(Me.tableDatosAfiliado.COD_BENEFICIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_BENEFICIONull()
            Me(Me.tableDatosAfiliado.COD_BENEFICIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOBRA_SOCIALNull() As Boolean
            Return Me.IsNull(Me.tableDatosAfiliado.OBRA_SOCIALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOBRA_SOCIALNull()
            Me(Me.tableDatosAfiliado.OBRA_SOCIALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOPENull() As Boolean
            Return Me.IsNull(Me.tableDatosAfiliado.TOPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOPENull()
            Me(Me.tableDatosAfiliado.TOPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUCESORNull() As Boolean
            Return Me.IsNull(Me.tableDatosAfiliado.SUCESORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUCESORNull()
            Me(Me.tableDatosAfiliado.SUCESORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNROCTACTENull() As Boolean
            Return Me.IsNull(Me.tableDatosAfiliado.NROCTACTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNROCTACTENull()
            Me(Me.tableDatosAfiliado.NROCTACTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSITRAJNull() As Boolean
            Return Me.IsNull(Me.tableDatosAfiliado.SITRAJColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSITRAJNull()
            Me(Me.tableDatosAfiliado.SITRAJColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLETRANull() As Boolean
            Return Me.IsNull(Me.tableDatosAfiliado.LETRAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLETRANull()
            Me(Me.tableDatosAfiliado.LETRAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHABILITADONull() As Boolean
            Return Me.IsNull(Me.tableDatosAfiliado.HABILITADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHABILITADONull()
            Me(Me.tableDatosAfiliado.HABILITADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODLOCALIDADNull() As Boolean
            Return Me.IsNull(Me.tableDatosAfiliado.CODLOCALIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODLOCALIDADNull()
            Me(Me.tableDatosAfiliado.CODLOCALIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCESENull() As Boolean
            Return Me.IsNull(Me.tableDatosAfiliado.CESEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCESENull()
            Me(Me.tableDatosAfiliado.CESEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRes932Null() As Boolean
            Return Me.IsNull(Me.tableDatosAfiliado.Res932Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRes932Null()
            Me(Me.tableDatosAfiliado.Res932Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNROCTACTENACIONNull() As Boolean
            Return Me.IsNull(Me.tableDatosAfiliado.NROCTACTENACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNROCTACTENACIONNull()
            Me(Me.tableDatosAfiliado.NROCTACTENACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCalleNomNull() As Boolean
            Return Me.IsNull(Me.tableDatosAfiliado.CalleNomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCalleNomNull()
            Me(Me.tableDatosAfiliado.CalleNomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCalleNumNull() As Boolean
            Return Me.IsNull(Me.tableDatosAfiliado.CalleNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCalleNumNull()
            Me(Me.tableDatosAfiliado.CalleNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCallePisoNull() As Boolean
            Return Me.IsNull(Me.tableDatosAfiliado.CallePisoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCallePisoNull()
            Me(Me.tableDatosAfiliado.CallePisoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeptoNull() As Boolean
            Return Me.IsNull(Me.tableDatosAfiliado.DeptoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeptoNull()
            Me(Me.tableDatosAfiliado.DeptoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCBUNull() As Boolean
            Return Me.IsNull(Me.tableDatosAfiliado.CBUColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCBUNull()
            Me(Me.tableDatosAfiliado.CBUColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFNacNull() As Boolean
            Return Me.IsNull(Me.tableDatosAfiliado.FNacColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFNacNull()
            Me(Me.tableDatosAfiliado.FNacColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isupsize_tsNull() As Boolean
            Return Me.IsNull(Me.tableDatosAfiliado.upsize_tsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setupsize_tsNull()
            Me(Me.tableDatosAfiliado.upsize_tsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetApoderadoRows() As ApoderadoRow()
            If (Me.Table.ChildRelations("Apoderado_FK00") Is Nothing) Then
                Return New ApoderadoRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Apoderado_FK00")),ApoderadoRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetfotosRows() As fotosRow()
            If (Me.Table.ChildRelations("DatosAfiliado_fotos") Is Nothing) Then
                Return New fotosRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("DatosAfiliado_fotos")),fotosRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class fotosRow
        Inherits Global.System.Data.DataRow
        
        Private tablefotos As fotosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablefotos = CType(Me.Table,fotosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CONTROL() As Integer
            Get
                Return CType(Me(Me.tablefotos.CONTROLColumn),Integer)
            End Get
            Set
                Me(Me.tablefotos.CONTROLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOTO() As Byte()
            Get
                Return CType(Me(Me.tablefotos.FOTOColumn),Byte())
            End Get
            Set
                Me(Me.tablefotos.FOTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DatosAfiliadoRow() As DatosAfiliadoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("DatosAfiliado_fotos")),DatosAfiliadoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("DatosAfiliado_fotos"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ApoderadoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ApoderadoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ApoderadoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ApoderadoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DatosAfiliadoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DatosAfiliadoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DatosAfiliadoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DatosAfiliadoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class fotosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As fotosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As fotosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As fotosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace LiquidacionDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ApoderadoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Apoderado"
            tableMapping.ColumnMappings.Add("INTERNO", "INTERNO")
            tableMapping.ColumnMappings.Add("PLLA", "PLLA")
            tableMapping.ColumnMappings.Add("ORDEN", "ORDEN")
            tableMapping.ColumnMappings.Add("AFILIADO", "AFILIADO")
            tableMapping.ColumnMappings.Add("NOMBRE", "NOMBRE")
            tableMapping.ColumnMappings.Add("DIRECCION", "DIRECCION")
            tableMapping.ColumnMappings.Add("TIPO_DOC", "TIPO_DOC")
            tableMapping.ColumnMappings.Add("NRO_DOCUMENTO", "NRO_DOCUMENTO")
            tableMapping.ColumnMappings.Add("COD_LOCALIDAD", "COD_LOCALIDAD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Apoderado] ([PLLA], [ORDEN], [AFILIADO], [NOMBRE], [DIRECCION]"& _ 
                ", [TIPO_DOC], [NRO_DOCUMENTO], [COD_LOCALIDAD]) VALUES (@PLLA, @ORDEN, @AFILIADO"& _ 
                ", @NOMBRE, @DIRECCION, @TIPO_DOC, @NRO_DOCUMENTO, @COD_LOCALIDAD)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLLA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLLA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDEN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDEN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AFILIADO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AFILIADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIRECCION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIRECCION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TIPO_DOC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIPO_DOC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NRO_DOCUMENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NRO_DOCUMENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_LOCALIDAD", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COD_LOCALIDAD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.IPS.Carnets.My.MySettings.Default.LiquidacionConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT INTERNO, PLLA, ORDEN, AFILIADO, NOMBRE, DIRECCION, TIPO_DOC, NRO_DOCUMENTO"& _ 
                ", COD_LOCALIDAD FROM dbo.Apoderado"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT INTERNO, PLLA, ORDEN, AFILIADO, NOMBRE, DIRECCION, TIPO_DOC, NRO_DOCUMENTO"& _ 
                ", COD_LOCALIDAD FROM dbo.Apoderado"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE PLLA = @PLLA AND ORDEN = @ORDEN AND AF"& _ 
                "ILIADO = @AFILIADO"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLLA", Global.System.Data.SqlDbType.NVarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "PLLA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDEN", Global.System.Data.SqlDbType.NVarChar, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDEN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AFILIADO", Global.System.Data.SqlDbType.NVarChar, 6, Global.System.Data.ParameterDirection.Input, 0, 0, "AFILIADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As LiquidacionDataSet.ApoderadoDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As LiquidacionDataSet.ApoderadoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As LiquidacionDataSet.ApoderadoDataTable = New LiquidacionDataSet.ApoderadoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByPOA(ByVal dataTable As LiquidacionDataSet.ApoderadoDataTable, ByVal PLLA As String, ByVal ORDEN As String, ByVal AFILIADO As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PLLA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PLLA")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PLLA,String)
            End If
            If (ORDEN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ORDEN")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ORDEN,String)
            End If
            If (AFILIADO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AFILIADO")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(AFILIADO,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByPOA(ByVal PLLA As String, ByVal ORDEN As String, ByVal AFILIADO As String) As LiquidacionDataSet.ApoderadoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PLLA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PLLA")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PLLA,String)
            End If
            If (ORDEN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ORDEN")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ORDEN,String)
            End If
            If (AFILIADO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AFILIADO")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(AFILIADO,String)
            End If
            Dim dataTable As LiquidacionDataSet.ApoderadoDataTable = New LiquidacionDataSet.ApoderadoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As LiquidacionDataSet.ApoderadoDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As LiquidacionDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Apoderado")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PLLA As String, ByVal ORDEN As String, ByVal AFILIADO As String, ByVal NOMBRE As String, ByVal DIRECCION As String, ByVal TIPO_DOC As String, ByVal NRO_DOCUMENTO As String, ByVal COD_LOCALIDAD As String) As Integer
            If (PLLA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PLLA")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PLLA,String)
            End If
            If (ORDEN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ORDEN")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ORDEN,String)
            End If
            If (AFILIADO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AFILIADO")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(AFILIADO,String)
            End If
            If (NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(NOMBRE,String)
            End If
            If (DIRECCION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DIRECCION,String)
            End If
            If (TIPO_DOC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(TIPO_DOC,String)
            End If
            If (NRO_DOCUMENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NRO_DOCUMENTO")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(NRO_DOCUMENTO,String)
            End If
            If (COD_LOCALIDAD Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(COD_LOCALIDAD,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DatosAfiliadoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DatosAfiliado"
            tableMapping.ColumnMappings.Add("PLLA", "PLLA")
            tableMapping.ColumnMappings.Add("ORDEN", "ORDEN")
            tableMapping.ColumnMappings.Add("AFILIADO", "AFILIADO")
            tableMapping.ColumnMappings.Add("CONTROL", "CONTROL")
            tableMapping.ColumnMappings.Add("RESOLUCION", "RESOLUCION")
            tableMapping.ColumnMappings.Add("NOMBRE", "NOMBRE")
            tableMapping.ColumnMappings.Add("DIRECCION", "DIRECCION")
            tableMapping.ColumnMappings.Add("SEXO", "SEXO")
            tableMapping.ColumnMappings.Add("TIPO_DOC", "TIPO_DOC")
            tableMapping.ColumnMappings.Add("NRO_DOCUMENTO", "NRO_DOCUMENTO")
            tableMapping.ColumnMappings.Add("CUIL", "CUIL")
            tableMapping.ColumnMappings.Add("CLASE", "CLASE")
            tableMapping.ColumnMappings.Add("EXPEDIENTE", "EXPEDIENTE")
            tableMapping.ColumnMappings.Add("ANO_EXPEDIENTE", "ANO_EXPEDIENTE")
            tableMapping.ColumnMappings.Add("COD_BENEFICIO", "COD_BENEFICIO")
            tableMapping.ColumnMappings.Add("BENEFICIO", "BENEFICIO")
            tableMapping.ColumnMappings.Add("OBRA_SOCIAL", "OBRA_SOCIAL")
            tableMapping.ColumnMappings.Add("TOPE", "TOPE")
            tableMapping.ColumnMappings.Add("SUCESOR", "SUCESOR")
            tableMapping.ColumnMappings.Add("NROCTACTE", "NROCTACTE")
            tableMapping.ColumnMappings.Add("SITRAJ", "SITRAJ")
            tableMapping.ColumnMappings.Add("LETRA", "LETRA")
            tableMapping.ColumnMappings.Add("HABILITADO", "HABILITADO")
            tableMapping.ColumnMappings.Add("BORRADO", "BORRADO")
            tableMapping.ColumnMappings.Add("CODLOCALIDAD", "CODLOCALIDAD")
            tableMapping.ColumnMappings.Add("CESE", "CESE")
            tableMapping.ColumnMappings.Add("Res932", "Res932")
            tableMapping.ColumnMappings.Add("NROCTACTENACION", "NROCTACTENACION")
            tableMapping.ColumnMappings.Add("CalleNom", "CalleNom")
            tableMapping.ColumnMappings.Add("CalleNum", "CalleNum")
            tableMapping.ColumnMappings.Add("CallePiso", "CallePiso")
            tableMapping.ColumnMappings.Add("Depto", "Depto")
            tableMapping.ColumnMappings.Add("CBU", "CBU")
            tableMapping.ColumnMappings.Add("FNac", "FNac")
            tableMapping.ColumnMappings.Add("upsize_ts", "upsize_ts")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DatosAfiliado] WHERE (([PLLA] = @Original_PLLA) AND ([ORDEN] ="& _ 
                " @Original_ORDEN) AND ([AFILIADO] = @Original_AFILIADO) AND ((@IsNull_upsize_ts "& _ 
                "= 1 AND [upsize_ts] IS NULL) OR ([upsize_ts] = @Original_upsize_ts)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PLLA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLLA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ORDEN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDEN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AFILIADO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AFILIADO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_upsize_ts", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "upsize_ts", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_upsize_ts", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "upsize_ts", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[DatosAfiliado] ([PLLA], [ORDEN], [AFILIADO], [RESOLUCION], [NO"& _ 
                "MBRE], [DIRECCION], [SEXO], [TIPO_DOC], [NRO_DOCUMENTO], [CUIL], [CLASE], [EXPED"& _ 
                "IENTE], [ANO_EXPEDIENTE], [COD_BENEFICIO], [BENEFICIO], [OBRA_SOCIAL], [TOPE], ["& _ 
                "SUCESOR], [NROCTACTE], [SITRAJ], [LETRA], [HABILITADO], [BORRADO], [CODLOCALIDAD"& _ 
                "], [CESE], [Res932], [NROCTACTENACION], [CalleNom], [CalleNum], [CallePiso], [De"& _ 
                "pto], [CBU], [FNac]) VALUES (@PLLA, @ORDEN, @AFILIADO, @RESOLUCION, @NOMBRE, @DI"& _ 
                "RECCION, @SEXO, @TIPO_DOC, @NRO_DOCUMENTO, @CUIL, @CLASE, @EXPEDIENTE, @ANO_EXPE"& _ 
                "DIENTE, @COD_BENEFICIO, @BENEFICIO, @OBRA_SOCIAL, @TOPE, @SUCESOR, @NROCTACTE, @"& _ 
                "SITRAJ, @LETRA, @HABILITADO, @BORRADO, @CODLOCALIDAD, @CESE, @Res932, @NROCTACTE"& _ 
                "NACION, @CalleNom, @CalleNum, @CallePiso, @Depto, @CBU, @FNac);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PLLA, OR"& _ 
                "DEN, AFILIADO, CONTROL, RESOLUCION, NOMBRE, DIRECCION, SEXO, TIPO_DOC, NRO_DOCUM"& _ 
                "ENTO, CUIL, CLASE, EXPEDIENTE, ANO_EXPEDIENTE, COD_BENEFICIO, BENEFICIO, OBRA_SO"& _ 
                "CIAL, TOPE, SUCESOR, NROCTACTE, SITRAJ, LETRA, HABILITADO, BORRADO, CODLOCALIDAD"& _ 
                ", CESE, Res932, NROCTACTENACION, CalleNom, CalleNum, CallePiso, Depto, CBU, FNac"& _ 
                ", upsize_ts FROM DatosAfiliado WHERE (AFILIADO = @AFILIADO) AND (ORDEN = @ORDEN)"& _ 
                " AND (PLLA = @PLLA)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLLA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLLA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDEN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDEN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AFILIADO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AFILIADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RESOLUCION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RESOLUCION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIRECCION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIRECCION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEXO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEXO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TIPO_DOC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIPO_DOC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NRO_DOCUMENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NRO_DOCUMENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUIL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUIL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLASE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLASE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EXPEDIENTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EXPEDIENTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ANO_EXPEDIENTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ANO_EXPEDIENTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_BENEFICIO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COD_BENEFICIO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BENEFICIO", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BENEFICIO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OBRA_SOCIAL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OBRA_SOCIAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOPE", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUCESOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUCESOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NROCTACTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NROCTACTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SITRAJ", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SITRAJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LETRA", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LETRA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HABILITADO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HABILITADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BORRADO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BORRADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODLOCALIDAD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODLOCALIDAD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CESE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CESE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Res932", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Res932", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NROCTACTENACION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NROCTACTENACION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CalleNom", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CalleNom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CalleNum", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CalleNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CallePiso", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CallePiso", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Depto", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CBU", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CBU", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FNac", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FNac", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[DatosAfiliado] SET [PLLA] = @PLLA, [ORDEN] = @ORDEN, [AFILIADO] = @"& _ 
                "AFILIADO, [RESOLUCION] = @RESOLUCION, [NOMBRE] = @NOMBRE, [DIRECCION] = @DIRECCI"& _ 
                "ON, [SEXO] = @SEXO, [TIPO_DOC] = @TIPO_DOC, [NRO_DOCUMENTO] = @NRO_DOCUMENTO, [C"& _ 
                "UIL] = @CUIL, [CLASE] = @CLASE, [EXPEDIENTE] = @EXPEDIENTE, [ANO_EXPEDIENTE] = @"& _ 
                "ANO_EXPEDIENTE, [COD_BENEFICIO] = @COD_BENEFICIO, [BENEFICIO] = @BENEFICIO, [OBR"& _ 
                "A_SOCIAL] = @OBRA_SOCIAL, [TOPE] = @TOPE, [SUCESOR] = @SUCESOR, [NROCTACTE] = @N"& _ 
                "ROCTACTE, [SITRAJ] = @SITRAJ, [LETRA] = @LETRA, [HABILITADO] = @HABILITADO, [BOR"& _ 
                "RADO] = @BORRADO, [CODLOCALIDAD] = @CODLOCALIDAD, [CESE] = @CESE, [Res932] = @Re"& _ 
                "s932, [NROCTACTENACION] = @NROCTACTENACION, [CalleNom] = @CalleNom, [CalleNum] ="& _ 
                " @CalleNum, [CallePiso] = @CallePiso, [Depto] = @Depto, [CBU] = @CBU, [FNac] = @"& _ 
                "FNac WHERE (([PLLA] = @Original_PLLA) AND ([ORDEN] = @Original_ORDEN) AND ([AFIL"& _ 
                "IADO] = @Original_AFILIADO) AND ((@IsNull_upsize_ts = 1 AND [upsize_ts] IS NULL)"& _ 
                " OR ([upsize_ts] = @Original_upsize_ts)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PLLA, ORDEN, AFILIADO, CONTRO"& _ 
                "L, RESOLUCION, NOMBRE, DIRECCION, SEXO, TIPO_DOC, NRO_DOCUMENTO, CUIL, CLASE, EX"& _ 
                "PEDIENTE, ANO_EXPEDIENTE, COD_BENEFICIO, BENEFICIO, OBRA_SOCIAL, TOPE, SUCESOR, "& _ 
                "NROCTACTE, SITRAJ, LETRA, HABILITADO, BORRADO, CODLOCALIDAD, CESE, Res932, NROCT"& _ 
                "ACTENACION, CalleNom, CalleNum, CallePiso, Depto, CBU, FNac, upsize_ts FROM Dato"& _ 
                "sAfiliado WHERE (AFILIADO = @AFILIADO) AND (ORDEN = @ORDEN) AND (PLLA = @PLLA)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLLA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLLA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDEN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDEN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AFILIADO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AFILIADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RESOLUCION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RESOLUCION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOMBRE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOMBRE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIRECCION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIRECCION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEXO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEXO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TIPO_DOC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIPO_DOC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NRO_DOCUMENTO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NRO_DOCUMENTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUIL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUIL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLASE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLASE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EXPEDIENTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EXPEDIENTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ANO_EXPEDIENTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ANO_EXPEDIENTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_BENEFICIO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COD_BENEFICIO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BENEFICIO", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BENEFICIO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OBRA_SOCIAL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OBRA_SOCIAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOPE", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUCESOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUCESOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NROCTACTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NROCTACTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SITRAJ", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SITRAJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LETRA", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LETRA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HABILITADO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HABILITADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BORRADO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BORRADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODLOCALIDAD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CODLOCALIDAD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CESE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CESE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Res932", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Res932", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NROCTACTENACION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NROCTACTENACION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CalleNom", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CalleNom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CalleNum", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CalleNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CallePiso", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CallePiso", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Depto", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Depto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CBU", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CBU", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FNac", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FNac", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PLLA", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLLA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ORDEN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDEN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AFILIADO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AFILIADO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_upsize_ts", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "upsize_ts", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_upsize_ts", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "upsize_ts", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.IPS.Carnets.My.MySettings.Default.LiquidacionConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PLLA, ORDEN, AFILIADO, CONTROL, RESOLUCION, NOMBRE, DIRECCION, SEXO, TIPO_"& _ 
                "DOC, NRO_DOCUMENTO, CUIL, CLASE, EXPEDIENTE, ANO_EXPEDIENTE, COD_BENEFICIO, BENE"& _ 
                "FICIO, OBRA_SOCIAL, TOPE, SUCESOR, NROCTACTE, SITRAJ, LETRA, HABILITADO, BORRADO"& _ 
                ", CODLOCALIDAD, CESE, Res932, NROCTACTENACION, CalleNom, CalleNum, CallePiso, De"& _ 
                "pto, CBU, FNac, upsize_ts FROM dbo.DatosAfiliado"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT PLLA, ORDEN, AFILIADO, CONTROL, RESOLUCION, NOMBRE, DIRECCION, SEXO, TIPO_"& _ 
                "DOC, NRO_DOCUMENTO, CUIL, CLASE, EXPEDIENTE, ANO_EXPEDIENTE, COD_BENEFICIO, BENE"& _ 
                "FICIO, OBRA_SOCIAL, TOPE, SUCESOR, NROCTACTE, SITRAJ, LETRA, HABILITADO, BORRADO"& _ 
                ", CODLOCALIDAD, CESE, Res932, NROCTACTENACION, CalleNom, CalleNum, CallePiso, De"& _ 
                "pto, CBU, FNac, upsize_ts "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM dbo.DatosAfiliado"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE PLLA = @PLLA AND ORDEN"& _ 
                " = @ORDEN AND AFILIADO = @AFILIADO"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLLA", Global.System.Data.SqlDbType.NVarChar, 3, Global.System.Data.ParameterDirection.Input, 0, 0, "PLLA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDEN", Global.System.Data.SqlDbType.NVarChar, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDEN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AFILIADO", Global.System.Data.SqlDbType.NVarChar, 6, Global.System.Data.ParameterDirection.Input, 0, 0, "AFILIADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As LiquidacionDataSet.DatosAfiliadoDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As LiquidacionDataSet.DatosAfiliadoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As LiquidacionDataSet.DatosAfiliadoDataTable = New LiquidacionDataSet.DatosAfiliadoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByPOA(ByVal dataTable As LiquidacionDataSet.DatosAfiliadoDataTable, ByVal PLLA As String, ByVal ORDEN As String, ByVal AFILIADO As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PLLA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PLLA")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PLLA,String)
            End If
            If (ORDEN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ORDEN")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ORDEN,String)
            End If
            If (AFILIADO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AFILIADO")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(AFILIADO,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByPOA(ByVal PLLA As String, ByVal ORDEN As String, ByVal AFILIADO As String) As LiquidacionDataSet.DatosAfiliadoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PLLA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PLLA")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PLLA,String)
            End If
            If (ORDEN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ORDEN")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ORDEN,String)
            End If
            If (AFILIADO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AFILIADO")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(AFILIADO,String)
            End If
            Dim dataTable As LiquidacionDataSet.DatosAfiliadoDataTable = New LiquidacionDataSet.DatosAfiliadoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As LiquidacionDataSet.DatosAfiliadoDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As LiquidacionDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "DatosAfiliado")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PLLA As String, ByVal Original_ORDEN As String, ByVal Original_AFILIADO As String, ByVal Original_upsize_ts() As Byte) As Integer
            If (Original_PLLA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PLLA")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PLLA,String)
            End If
            If (Original_ORDEN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ORDEN")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ORDEN,String)
            End If
            If (Original_AFILIADO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_AFILIADO")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_AFILIADO,String)
            End If
            If (Original_upsize_ts Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_upsize_ts,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal PLLA As String,  _
                    ByVal ORDEN As String,  _
                    ByVal AFILIADO As String,  _
                    ByVal RESOLUCION As String,  _
                    ByVal NOMBRE As String,  _
                    ByVal DIRECCION As String,  _
                    ByVal SEXO As String,  _
                    ByVal TIPO_DOC As String,  _
                    ByVal NRO_DOCUMENTO As String,  _
                    ByVal CUIL As String,  _
                    ByVal CLASE As Global.System.Nullable(Of Integer),  _
                    ByVal EXPEDIENTE As String,  _
                    ByVal ANO_EXPEDIENTE As String,  _
                    ByVal COD_BENEFICIO As String,  _
                    ByVal BENEFICIO As Double,  _
                    ByVal OBRA_SOCIAL As String,  _
                    ByVal TOPE As Global.System.Nullable(Of Short),  _
                    ByVal SUCESOR As String,  _
                    ByVal NROCTACTE As String,  _
                    ByVal SITRAJ As String,  _
                    ByVal LETRA As Global.System.Nullable(Of Short),  _
                    ByVal HABILITADO As String,  _
                    ByVal BORRADO As String,  _
                    ByVal CODLOCALIDAD As Global.System.Nullable(Of Short),  _
                    ByVal CESE As String,  _
                    ByVal Res932 As String,  _
                    ByVal NROCTACTENACION As String,  _
                    ByVal CalleNom As String,  _
                    ByVal CalleNum As Global.System.Nullable(Of Short),  _
                    ByVal CallePiso As Global.System.Nullable(Of Short),  _
                    ByVal Depto As String,  _
                    ByVal CBU As String,  _
                    ByVal FNac As String) As Integer
            If (PLLA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PLLA")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PLLA,String)
            End If
            If (ORDEN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ORDEN")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ORDEN,String)
            End If
            If (AFILIADO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AFILIADO")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(AFILIADO,String)
            End If
            If (RESOLUCION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(RESOLUCION,String)
            End If
            If (NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(NOMBRE,String)
            End If
            If (DIRECCION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DIRECCION,String)
            End If
            If (SEXO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SEXO")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(SEXO,String)
            End If
            If (TIPO_DOC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(TIPO_DOC,String)
            End If
            If (NRO_DOCUMENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NRO_DOCUMENTO")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(NRO_DOCUMENTO,String)
            End If
            If (CUIL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(CUIL,String)
            End If
            If (CLASE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(CLASE.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (EXPEDIENTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(EXPEDIENTE,String)
            End If
            If (ANO_EXPEDIENTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(ANO_EXPEDIENTE,String)
            End If
            If (COD_BENEFICIO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(COD_BENEFICIO,String)
            End If
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(BENEFICIO,Double)
            If (OBRA_SOCIAL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(OBRA_SOCIAL,String)
            End If
            If (TOPE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(TOPE.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (SUCESOR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(SUCESOR,String)
            End If
            If (NROCTACTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(NROCTACTE,String)
            End If
            If (SITRAJ Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(SITRAJ,String)
            End If
            If (LETRA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(LETRA.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (HABILITADO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(HABILITADO,String)
            End If
            If (BORRADO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("BORRADO")
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(BORRADO,String)
            End If
            If (CODLOCALIDAD.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(CODLOCALIDAD.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (CESE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(CESE,String)
            End If
            If (Res932 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(Res932,String)
            End If
            If (NROCTACTENACION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(NROCTACTENACION,String)
            End If
            If (CalleNom Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(CalleNom,String)
            End If
            If (CalleNum.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(CalleNum.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (CallePiso.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(CallePiso.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Depto Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(Depto,String)
            End If
            If (CBU Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(CBU,String)
            End If
            If (FNac Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(FNac,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PLLA As String,  _
                    ByVal ORDEN As String,  _
                    ByVal AFILIADO As String,  _
                    ByVal RESOLUCION As String,  _
                    ByVal NOMBRE As String,  _
                    ByVal DIRECCION As String,  _
                    ByVal SEXO As String,  _
                    ByVal TIPO_DOC As String,  _
                    ByVal NRO_DOCUMENTO As String,  _
                    ByVal CUIL As String,  _
                    ByVal CLASE As Global.System.Nullable(Of Integer),  _
                    ByVal EXPEDIENTE As String,  _
                    ByVal ANO_EXPEDIENTE As String,  _
                    ByVal COD_BENEFICIO As String,  _
                    ByVal BENEFICIO As Double,  _
                    ByVal OBRA_SOCIAL As String,  _
                    ByVal TOPE As Global.System.Nullable(Of Short),  _
                    ByVal SUCESOR As String,  _
                    ByVal NROCTACTE As String,  _
                    ByVal SITRAJ As String,  _
                    ByVal LETRA As Global.System.Nullable(Of Short),  _
                    ByVal HABILITADO As String,  _
                    ByVal BORRADO As String,  _
                    ByVal CODLOCALIDAD As Global.System.Nullable(Of Short),  _
                    ByVal CESE As String,  _
                    ByVal Res932 As String,  _
                    ByVal NROCTACTENACION As String,  _
                    ByVal CalleNom As String,  _
                    ByVal CalleNum As Global.System.Nullable(Of Short),  _
                    ByVal CallePiso As Global.System.Nullable(Of Short),  _
                    ByVal Depto As String,  _
                    ByVal CBU As String,  _
                    ByVal FNac As String,  _
                    ByVal Original_PLLA As String,  _
                    ByVal Original_ORDEN As String,  _
                    ByVal Original_AFILIADO As String,  _
                    ByVal Original_upsize_ts() As Byte) As Integer
            If (PLLA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PLLA")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PLLA,String)
            End If
            If (ORDEN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ORDEN")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ORDEN,String)
            End If
            If (AFILIADO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AFILIADO")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(AFILIADO,String)
            End If
            If (RESOLUCION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(RESOLUCION,String)
            End If
            If (NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(NOMBRE,String)
            End If
            If (DIRECCION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(DIRECCION,String)
            End If
            If (SEXO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SEXO")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(SEXO,String)
            End If
            If (TIPO_DOC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(TIPO_DOC,String)
            End If
            If (NRO_DOCUMENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NRO_DOCUMENTO")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(NRO_DOCUMENTO,String)
            End If
            If (CUIL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(CUIL,String)
            End If
            If (CLASE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(CLASE.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (EXPEDIENTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(EXPEDIENTE,String)
            End If
            If (ANO_EXPEDIENTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(ANO_EXPEDIENTE,String)
            End If
            If (COD_BENEFICIO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(COD_BENEFICIO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(BENEFICIO,Double)
            If (OBRA_SOCIAL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(OBRA_SOCIAL,String)
            End If
            If (TOPE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(TOPE.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (SUCESOR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(SUCESOR,String)
            End If
            If (NROCTACTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(NROCTACTE,String)
            End If
            If (SITRAJ Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(SITRAJ,String)
            End If
            If (LETRA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(LETRA.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (HABILITADO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(HABILITADO,String)
            End If
            If (BORRADO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("BORRADO")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(BORRADO,String)
            End If
            If (CODLOCALIDAD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(CODLOCALIDAD.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (CESE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(CESE,String)
            End If
            If (Res932 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Res932,String)
            End If
            If (NROCTACTENACION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(NROCTACTENACION,String)
            End If
            If (CalleNom Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(CalleNom,String)
            End If
            If (CalleNum.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(CalleNum.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (CallePiso.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(CallePiso.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Depto Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Depto,String)
            End If
            If (CBU Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(CBU,String)
            End If
            If (FNac Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(FNac,String)
            End If
            If (Original_PLLA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PLLA")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_PLLA,String)
            End If
            If (Original_ORDEN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ORDEN")
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_ORDEN,String)
            End If
            If (Original_AFILIADO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_AFILIADO")
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_AFILIADO,String)
            End If
            If (Original_upsize_ts Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_upsize_ts,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal RESOLUCION As String,  _
                    ByVal NOMBRE As String,  _
                    ByVal DIRECCION As String,  _
                    ByVal SEXO As String,  _
                    ByVal TIPO_DOC As String,  _
                    ByVal NRO_DOCUMENTO As String,  _
                    ByVal CUIL As String,  _
                    ByVal CLASE As Global.System.Nullable(Of Integer),  _
                    ByVal EXPEDIENTE As String,  _
                    ByVal ANO_EXPEDIENTE As String,  _
                    ByVal COD_BENEFICIO As String,  _
                    ByVal BENEFICIO As Double,  _
                    ByVal OBRA_SOCIAL As String,  _
                    ByVal TOPE As Global.System.Nullable(Of Short),  _
                    ByVal SUCESOR As String,  _
                    ByVal NROCTACTE As String,  _
                    ByVal SITRAJ As String,  _
                    ByVal LETRA As Global.System.Nullable(Of Short),  _
                    ByVal HABILITADO As String,  _
                    ByVal BORRADO As String,  _
                    ByVal CODLOCALIDAD As Global.System.Nullable(Of Short),  _
                    ByVal CESE As String,  _
                    ByVal Res932 As String,  _
                    ByVal NROCTACTENACION As String,  _
                    ByVal CalleNom As String,  _
                    ByVal CalleNum As Global.System.Nullable(Of Short),  _
                    ByVal CallePiso As Global.System.Nullable(Of Short),  _
                    ByVal Depto As String,  _
                    ByVal CBU As String,  _
                    ByVal FNac As String,  _
                    ByVal Original_PLLA As String,  _
                    ByVal Original_ORDEN As String,  _
                    ByVal Original_AFILIADO As String,  _
                    ByVal Original_upsize_ts() As Byte) As Integer
            Return Me.Update(Original_PLLA, Original_ORDEN, Original_AFILIADO, RESOLUCION, NOMBRE, DIRECCION, SEXO, TIPO_DOC, NRO_DOCUMENTO, CUIL, CLASE, EXPEDIENTE, ANO_EXPEDIENTE, COD_BENEFICIO, BENEFICIO, OBRA_SOCIAL, TOPE, SUCESOR, NROCTACTE, SITRAJ, LETRA, HABILITADO, BORRADO, CODLOCALIDAD, CESE, Res932, NROCTACTENACION, CalleNom, CalleNum, CallePiso, Depto, CBU, FNac, Original_PLLA, Original_ORDEN, Original_AFILIADO, Original_upsize_ts)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class fotosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "fotos"
            tableMapping.ColumnMappings.Add("CONTROL", "CONTROL")
            tableMapping.ColumnMappings.Add("FOTO", "FOTO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [fotos] ([CONTROL], [FOTO]) VALUES (@CONTROL, @FOTO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONTROL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONTROL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FOTO", Global.System.Data.SqlDbType.Image, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.IPS.Carnets.My.MySettings.Default.CARNETSConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     *"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         fotos"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     *"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         fotos"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As LiquidacionDataSet.fotosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As LiquidacionDataSet.fotosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As LiquidacionDataSet.fotosDataTable = New LiquidacionDataSet.fotosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByPOA(ByVal dataTable As LiquidacionDataSet.fotosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByPOA() As LiquidacionDataSet.fotosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Dim dataTable As LiquidacionDataSet.fotosDataTable = New LiquidacionDataSet.fotosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As LiquidacionDataSet.fotosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As LiquidacionDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "fotos")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _apoderadoTableAdapter As ApoderadoTableAdapter
        
        Private _datosAfiliadoTableAdapter As DatosAfiliadoTableAdapter
        
        Private _fotosTableAdapter As fotosTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ApoderadoTableAdapter() As ApoderadoTableAdapter
            Get
                Return Me._apoderadoTableAdapter
            End Get
            Set
                Me._apoderadoTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property DatosAfiliadoTableAdapter() As DatosAfiliadoTableAdapter
            Get
                Return Me._datosAfiliadoTableAdapter
            End Get
            Set
                Me._datosAfiliadoTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property fotosTableAdapter() As fotosTableAdapter
            Get
                Return Me._fotosTableAdapter
            End Get
            Set
                Me._fotosTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._apoderadoTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._apoderadoTableAdapter.Connection) Is Nothing)) Then
                    Return Me._apoderadoTableAdapter.Connection
                End If
                If ((Not (Me._datosAfiliadoTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._datosAfiliadoTableAdapter.Connection) Is Nothing)) Then
                    Return Me._datosAfiliadoTableAdapter.Connection
                End If
                If ((Not (Me._fotosTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._fotosTableAdapter.Connection) Is Nothing)) Then
                    Return Me._fotosTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._apoderadoTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._datosAfiliadoTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._fotosTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As LiquidacionDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._datosAfiliadoTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.DatosAfiliado.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._datosAfiliadoTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._fotosTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.fotos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._fotosTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._apoderadoTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Apoderado.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._apoderadoTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As LiquidacionDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._datosAfiliadoTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.DatosAfiliado.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._datosAfiliadoTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._fotosTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.fotos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._fotosTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._apoderadoTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Apoderado.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._apoderadoTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As LiquidacionDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._apoderadoTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Apoderado.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._apoderadoTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._fotosTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.fotos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._fotosTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._datosAfiliadoTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.DatosAfiliado.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._datosAfiliadoTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As LiquidacionDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._apoderadoTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._apoderadoTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._datosAfiliadoTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._datosAfiliadoTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._fotosTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._fotosTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager no contiene información de conexión. Establezca cada propieda"& _ 
                        "d TableAdapterManager TableAdapter en una instancia TableAdapter válida.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("La transacción no puede comenzar. La conexión de datos actual no es compatible co"& _ 
                        "n las transacciones o el estado actual no permite que comience la transacción.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._apoderadoTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._apoderadoTableAdapter, Me._apoderadoTableAdapter.Connection)
                    Me._apoderadoTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._apoderadoTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._apoderadoTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._apoderadoTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._apoderadoTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._datosAfiliadoTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._datosAfiliadoTableAdapter, Me._datosAfiliadoTableAdapter.Connection)
                    Me._datosAfiliadoTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._datosAfiliadoTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._datosAfiliadoTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._datosAfiliadoTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._datosAfiliadoTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._fotosTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._fotosTableAdapter, Me._fotosTableAdapter.Connection)
                    Me._fotosTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._fotosTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._fotosTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._fotosTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._fotosTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._apoderadoTableAdapter) Is Nothing) Then
                    Me._apoderadoTableAdapter.Connection = CType(revertConnections(Me._apoderadoTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._apoderadoTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._datosAfiliadoTableAdapter) Is Nothing) Then
                    Me._datosAfiliadoTableAdapter.Connection = CType(revertConnections(Me._datosAfiliadoTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._datosAfiliadoTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._fotosTableAdapter) Is Nothing) Then
                    Me._fotosTableAdapter.Connection = CType(revertConnections(Me._fotosTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._fotosTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
